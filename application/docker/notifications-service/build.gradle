description 'notifications-service'

apply from: "$configurationDir/docker.gradle"
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'base'

import com.bmuschko.gradle.docker.DockerRegistryCredentials
import com.bmuschko.gradle.docker.tasks.image.*

def imageProperties = getBaseImageProperties("openjdk")
def libsDir = getComponentLibsDir("notifications-service")

project.buildDir.mkdirs()
File dockerFolder = file("$dockerDirPath")

task copyJarToDocker(type: Copy, dependsOn: ':components:notifications-service:assemble') {
    from libsDir
    into dockerFolder

    doFirst {
      dockerFolder.mkdirs()
      dockerFolder.setWritable(true)
      dockerFolder.setExecutable(true)
    }

    outputs.upToDateWhen { false }
}

task generateDockerFile(type: Dockerfile, dependsOn: copyJarToDocker) {
    destFile = project.file("${buildDir}/Dockerfile")
    from "${imageProperties.imageName}:${imageProperties.tag}"
    workingDir("/opt/app")
    environmentVariable("MS_JAR_NAME", "docker/${jarName}-0.1-SNAPSHOT.jar")
    copyFile("\${MS_JAR_NAME}", "${jarName}.jar");
    entryPoint("java", "-jar", "${jarName}.jar");
}

task dockerBuildNotificationsService(type: DockerBuildImage, dependsOn: generateDockerFile) {
    inputDir = file("${buildDir}")
    tags.add("${dockerHubName}/${project.name}:${imageTag}")
}

task dockerPushNotificationsService(type: DockerPushImage, dependsOn: dockerBuildNotificationsService) {
    imageName = "${dockerHubName}/${project.name}"
    tag = "${imageTag}"
    registryCredentials = new DockerRegistryCredentials()
    registryCredentials.username = "${registryUsername}"
    registryCredentials.password = "${registryPassword}"
}

dockerPush.dependsOn dockerPushNotificationsService